{
  "name": "mongoose-validators",
  "version": "0.1.0",
  "description": "Validators for Mongoose schemas with validator.js",
  "main": "lib/validators.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/niklasvh/mongoose-validators"
  },
  "keywords": [
    "mongoose",
    "validate",
    "validation",
    "mongodb",
    "schema",
    "models"
  ],
  "author": {
    "name": "Niklas von Hertzen"
  },
  "license": "MIT",
  "dependencies": {
    "validator": "3.16.0"
  },
  "devDependencies": {
    "mocha": "1.20.1",
    "mongoose": "3.8.12"
  },
  "readme": "mongoose-validators\r\n===================\r\n\r\n[![Build Status](https://travis-ci.org/niklasvh/mongoose-validators.png)](https://travis-ci.org/niklasvh/mongoose-validators)\r\n\r\n[validator.js](https://github.com/chriso/validator.js) for [Mongoose](http://mongoosejs.com/) schemas.\r\n\r\n## Installation\r\n\r\n``` npm install mongoose-validators```\r\n\r\n## Usage\r\n\r\n    var mongoose = require('mongoose'),\r\n        validators = require('mongoose-validators');\r\n\r\n    // single validator\r\n    var Schema = new mongoose.Schema({\r\n        email: {type: String, validate: validators.isEmail()}\r\n    });\r\n\r\n    // multiple validators\r\n    var Schema = new mongoose.Schema({\r\n        username: {type: String, validate: [validators.isAlphanumeric(), validators.isLength(2, 60)]}\r\n    });\r\n\r\n## Options\r\n\r\nEach validator type can be passed an optional `options` object as the first argument. The following common options can be defined:\r\n\r\n - **skipNull** - Skip validation if the value is null or undefined, default: false\r\n - **skipEmpty** - Skip validation if the value is and empty string (\"\"), null or undefined, default: false\r\n - **message** - Override the default error message returned when validation fails.\r\n\r\n## Validators\r\n\r\nSame as with [validator.js](https://github.com/chriso/validator.js):\r\n\r\n - **equals([options, ] comparison)** - check if the string matches the comparison.\r\n - **contains([options, ] seed)** - check if the string contains the seed.\r\n - **matches([options, ] pattern [, modifiers])** - check if string matches the pattern. Either `matches('foo', /foo/i)` or `matches('foo', 'foo', 'i')`.\r\n - **isEmail([options])** - check if the string is an email.\r\n - **isURL([options])** - check if the string is an URL. `options` is an object which defaults to `{ protocols: ['http','https','ftp'], require_tld: true, require_protocol: false, allow_underscores: false }`.\r\n - **isIP([options, ][version])** - check if the string is an IP (version 4 or 6).\r\n - **isAlpha(([options])** - check if the string contains only letters (a-zA-Z).\r\n - **isNumeric([options])** - check if the string contains only numbers.\r\n - **isAlphanumeric([options])** - check if the string contains only letters and numbers.\r\n - **isBase64([options])** - check if a string is base64 encoded.\r\n - **isHexadecimal([options])** - check if the string is a hexadecimal number.\r\n - **isHexColor([options])** - check if the string is a hexadecimal color.\r\n - **isLowercase([options])** - check if the string is lowercase.\r\n - **isUppercase([options])** - check if the string is uppercase.\r\n - **isInt([options])** - check if the string is an integer.\r\n - **isFloat([options])** - check if the string is a float.\r\n - **isDivisibleBy([options, ] number)** - check if the string is a number that's divisible by another.\r\n - **isNull([options])** - check if the string is null.\r\n - **isLength([options,] min [, max])** - check if the string's length falls in a range. Note: this function takes into account surrogate pairs.\r\n - **isByteLength([options,] min [, max])** - check if the string's length (in bytes) falls in a range.\r\n - **isUUID([options][, version])** - check if the string is a UUID (version 3, 4 or 5).\r\n - **isDate([options])** - check if the string is a date.\r\n - **isAfter([options][, date])** - check if the string is a date that's after the specified date (defaults to now).\r\n - **isBefore([options][, date])** - check if the string is a date that's before the specified date.\r\n - **isIn([options, ]values)** - check if the string is in a array of allowed values.\r\n - **isCreditCard([options])** - check if the string is a credit card.\r\n - **isISBN([options][, version])** - check if the string is an ISBN (version 10 or 13).\r\n - **isJSON([options])** - check if the string is valid JSON (note: uses JSON.parse).\r\n - **isMultibyte([options])** - check if the string contains one or more multibyte chars.\r\n - **isAscii([options])** - check if the string contains ASCII chars only.\r\n - **isFullWidth([options])** - check if the string contains any full-width chars.\r\n - **isHalfWidth([options])** - check if the string contains any half-width chars.\r\n - **isVariableWidth([options])** - check if the string contains a mixture of full and half-width chars.\r\n - **isSurrogatePair([options])** - check if the string contains any surrogate pairs chars.\r\n\r\n## Testing\r\n\r\nRun mocha tests using:\r\n\r\n``` npm test````\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/niklasvh/mongoose-validators/issues"
  },
  "homepage": "https://github.com/niklasvh/mongoose-validators",
  "_id": "mongoose-validators@0.1.0",
  "_from": "mongoose-validators@^0.1.0"
}
