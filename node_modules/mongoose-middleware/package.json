{
  "name": "mongoose-middleware",
  "description": "Middleware for mongoose that makes filtering, sorting, pagination and projection chainable and simple to apply",
  "version": "0.2.20",
  "scripts": {
    "test": "gulp test-all"
  },
  "devDependencies": {
    "chai": "^3.5.0",
    "del": "^2.2.0",
    "gulp": "^3.9.1",
    "gulp-coveralls": "^0.1.4",
    "gulp-istanbul": "^0.10.3",
    "gulp-jshint": "^2.0.0",
    "gulp-mocha": "^2.2.0",
    "jshint": "^2.9.1",
    "jshint-stylish": "^2.1.0",
    "mongoose": "^4.4.6",
    "run-sequence": "^1.1.5"
  },
  "keywords": [
    "mongo",
    "mongoose",
    "mongoose middlware",
    "mongoose-middleware"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git@github.com:PlayNetwork/mongoose-middleware.git"
  },
  "main": "lib",
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "# Mongoose Middleware\n\n[![Build Status](https://secure.travis-ci.org/PlayNetwork/mongoose-middleware.png?branch=master)](http://travis-ci.org/PlayNetwork/mongoose-middleware?branch=master) [![Coverage Status](https://coveralls.io/repos/PlayNetwork/mongoose-middleware/badge.png)](https://coveralls.io/r/PlayNetwork/mongoose-middleware)\n\n## Features\n\n* Pagination (start, count and total matching)\n* Filtering (mandatory matches, optional matches and keyword search)\n* Sorting (ascending and descending)\n* Projection (response field filtering)\n\n## Install\n\n```Javascript\nnpm install mongoose-middleware\n```\n\nThen, simply require the library and pass in the instance of the `require('mongoose')` statement to the initialize method as follows:\n\n```Javascript\nvar mongoose = require('mongoose');\n\nrequire('mongoose-middleware').initialize(mongoose);\n```\n\nOptionally configure max documents for pagination:\n\n```Javascript\nvar mongoose = require('mongoose');\n\nrequire('mongoose-middleware').initialize({\n\t\tmaxDocs : 1000\n\t}, mongoose);\n```\n\n\n## Overview\n\nThis project aims to make basic searching, sorting, filtering and projection tasks against documents stored in MongoDB trivial via Mongoose middleware. The middle exposes a set of Mongoose Query object chainable methods for ease and simplicity of use.\n\nThe following example shows usage of field projections, mandatory and optional search filters, sorting and pagination.\n\n```Javascript\nvar\n\tmongoose = require('mongoose'),\n\tSchema = mongoose.Schema,\n\tKittehModel = mongoose.model(\n\t\t'kittehs',\n\t\tnew Schema({\n\t\t\tbirthday : { type : Date, default : Date.now },\n\t\t\tfeatures : {\n\t\t\t\tcolor : String,\n\t\t\t\tisFurreh : Boolean\n\t\t\t},\n\t\t\thome : String,\n\t\t\tname : String,\n\t\t\tpeePatches : [String]\n\t\t})\n\t);\n\nrequire('mongoose-middleware').initialize(mongoose);\n\n/*\n\tRetrieve the name, home and features.color of kittehs that live in Seattle,\n\tthat are named \"Hamish\" and that are brindle, black or white in color and born\n\tprior to January 1st, 2014. The results should be sorted by birthday in\n\tdescending order and name in ascending order.\n*/\nvar options = {\n\tfilters : {\n\t\tfield : ['name', 'home', 'features.color'],\n\t\tmandatory : {\n\t\t\tcontains : {\n\t\t\t\thome : 'seattle'\n\t\t\t},\n\t\t\texact : {\n\t\t\t\tname : 'Hamish'\n\t\t\t},\n\t\t\tlessThan : {\n\t\t\t\tbirthday : new Date(2014, 1, 1)\n\t\t\t}\n\t\t},\n\t\toptional : {\n\t\t\tcontains : {\n\t\t\t\t'features.color' : ['brindle', 'black', 'white']\n\t\t\t}\n\t\t}\n\t},\n\tsort : {\n\t\tdesc : 'birthday',\n\t\tasc : 'name'\n\t},\n\tstart : 0,\n\tcount : 500\n};\n\nKittehModel\n\t.find()\n\t.field(options)\n\t.keyword(options)\n\t.filter(options)\n\t.order(options)\n\t.page(options,\n\t\tfunction (err, kittehs) {\n\t\t\tif (!err) {\n\t\t\t\tconsole.log('we haz kittehs!');\n\t\t\t\tconsole.log(kittehs);\n\t\t\t} else {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t});\n```\n\n### Results\n\nThe options submitted to the `page(options, callback)` middleware method are echoed back in the response along with the results of the query and the total count of results matching the specified filters.\n\n```Javascript\n{\n\toptions : {\n\t\tcount : 500,\n\t\tfilters : {\n\t\t\tfield : ['name', 'home', 'features.color'],\n\t\t\tmandatory : {\n\t\t\t\tcontains : {\n\t\t\t\t\t'features.color' : ['brindle', 'black', 'white']\n\t\t\t\t},\n\t\t\t\texact : {\n\t\t\t\t\tname : 'Hamish'\n\t\t\t\t}\n\t\t\t},\n\t\t\toptional : {\n\t\t\t\tcontains : {\n\t\t\t\t\thome : 'seattle'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tsort : {\n\t\t\tdesc : 'birthday',\n\t\t\tasc : 'name'\n\t\t},\n\t\tstart : 0\n\t},\n\tresults : [ ... ], // the first 500 brindled, black or white kittehs named Hamish in Seattle\n\ttotal : 734\n}\n```\n\n## API\n\n### Initialization\n\nThe maxDocs property may optionally be specified on initialize to ensure no more than the specified number of documents are ever returned from a query. Please note that this does not affect the ability for the component to return the correct total count of results when using the pagination middleware function.\n\n```Javascript\nvar mongoose = require('mongoose'),\nrequire('mongoose-middleware').initialize({\n\t\tmaxDocs : 1000\n\t}, mongoose);\n```\n\n### Projection (Field Filters)\n\nIn order specify specific fields from a document in Mongo to be returned, the fields filter may be used.\n\n```Javascript\n\nvar options = {\n\tfilters : {\n\t\tfield : ['name', 'home', 'qualities.demeanor']\n\t}\n};\n\nKittehModel\n\t.find()\n\t.field(options)\n\t.exec(function (err, results) {\n\t\t// work with response...\n\t});\n\n```\n\nAlternatively, a single field can be specified (not in an array):\n\n```Javascript\nKittehModel\n\t.find()\n\t.field({ filters : { field : '_id' } })\n\t.exec(callback);\n```\n\n### Filters\n\nFilters can be used in three ways: mandatory, optional and keyword searches. Additionally, for mandatory and optional searches, exact, contains and startsWith string pattern matches may be used.\n\nThe following filters can be used for *mandatory*, *optional*, and *keyword* searches.\n\n* `exact` - Matches the string letter for letter, but is not case sensitive\n* `contains` - Matches documents where the string exists as a substring of the field (similar to a where field like '%term%' query in a relational datastore)\n* `startsWith` - Matches documents where field begins with the string supplied (similar to a where field like 'term%' query in a relational datastore)\n* `endsWith` - Matches documents where field ends with the string supplied (similar to a where field like '%term' query in a relational datastore)\n\nThe following filters can *ONLY* be used for *mandatory* and *keyword* searches.\n* `greaterThan` (or `gt`) - Matches documents where field value is greater than supplied number or Date value in query\n* `greaterThanEqual` (or `gte`) - Matches documents where field value is greater than or equal to supplied number or Date value in query\n* `lessThan` (or `lt`) - Matches documents where field value is less than supplied number or Date value in query\n* `lessThanEqual` (or `lte`) - Matches documents where field value is less than or equal to supplied number or Date value in query\n* `notEqual` (or `ne`) - Matches documents where field value is not equal to the supplied value\n\n#### Mandatory\n\nMandatory filters require that the document matches the specified search options or they will not be returned.\n\n#### Optional\n\nOptional searches allow you to specify more than one filter that you would like to match results for. This type of search is great for cases where you need to find documents that either match \"this\" *OR* \"that\". As an example, image you are searching for cats that are either manx, siamese or tabby, you would configure the filter as follows:\n\n```Javascript\nvar options = {\n\tfilters : {\n\t\toptional : {\n\t\t\texact : {\n\t\t\t\tbreed : ['manx', 'siamese', 'tabby']\n\t\t\t}\n\t\t}\n\t}\n};\n\nKittehModel\n\t.find()\n\t.filter(options)\n\t.exec(function (err, results) {\n\t\t// work with response...\n\t});\n```\n\n#### Keyword\n\nKeyword searches provide a convenient way to search more than one field with a single string. Additionally, keyword filters work differently from mandatory and optional filters in that they do not support `exact`, `contains` or `startsWith`. Instead the matches look for occurrences in a similar way to `contains` but with the ability to specify multiple terms in the query.\n\nThe following query will search for documents where the name, description or knownAliases contain Heathcliff the Cat. If the name (or description and knownAliases) contains \"Cat, the Heathcliff\", \"the Cat, Heathcliff\", \"Heathcliff Cat, the\" and \"the Heathcliff Cat\", those results will also be returned.\n\n```Javascript\nvar options = {\n\tfilters : {\n\t\tkeyword : {\n\t\t\tfields : ['name', 'description', 'knownAliases'],\n\t\t\tterm : 'Heathcliff the Cat'\n\t\t}\n\t}\n};\n\nKittehModel\n\t.find()\n\t.filter(options)\n\t.exec(function (err, results) {\n\t\t// work with response...\n\t});\n```\n\nIf you would like to ensure that matches of \"Heathcliff the Cat\" in that exact format are returned, simply enclose the term in quotes:\n\n```Javascript\nvar options = {\n\tfilters : {\n\t\tkeyword : {\n\t\t\tfields : ['name', 'description', 'knownAliases'],\n\t\t\tterm : '\"Heathcliff the Cat\"'\n\t\t}\n\t}\n};\n```\n\n### Sorting\n\nSorting, at this point, is fairly basic. All descending sorts will be applied prior to ascending sorts when specifying multiple sorts of each direction.\n\n#### Descending\n\n```Javascript\nvar options = {\n\tsort : {\n\t\tdesc : ['name', 'description', 'knownAliases']\n\t}\n};\n\nKittehModel\n\t.find()\n\t.order(options)\n\t.exec(function (err, results) {\n\t\t// work with response...\n\t});\n```\n\nYou may also specify a single field (not an array) for both descending and ascending sorts:\n\n```Javascript\nvar options = {\n\tsort : {\n\t\tdesc : 'birthday'\n\t}\n};\n```\n\n#### Ascending\n\n```Javascript\nvar options = {\n\tsort : {\n\t\tasc : ['name', 'description', 'knownAliases']\n\t}\n};\n\nKittehModel\n\t.find()\n\t.order(options)\n\t.exec(function (err, results) {\n\t\t// work with response...\n\t});\n```\n\nYou may also specify ascending and descending sorts together:\n\n```Javascript\nvar options = {\n\tsort : {\n\t\tasc : 'name'\n\t\tdesc : ['birthday', 'home']\n\t}\n};\n```\n\n### Pagination\n\nPagination is performed by swapping the `exec()` function of Mongoose with `page()`. Pagination may be specified as follows:\n\n```Javascript\nvar options = {\n\tstart : 0,\n\tcount : 100\n};\n\nKittehModel\n\t.find()\n\t.page(options, function (err, results) {\n\t\t// work with response...\n\t});\n```\n\nWhen using pagination, maxDocs may specified via the `initialize()` function of the library which will result in no more than that maximum number of documents being returned.\n\n```Javascript\nvar\n\tmongoose = require('mongoose'),\n\tKittehModel = require('./models/kitteh');\n\nrequire('mongoose-middleware').initialize({ maxDocs : 50 }, mongoose);\n\nvar options = {\n\tstart : 0,\n\tcount : 100\n};\n\nKittehModel\n\t.find()\n\t.page(options, function (err, results) {\n\t\t// results.options.count === 50\n\t});\n```\n\n*Please note*: While the maxDocs will limit the number of returned documents, it will not affect the total count value of matching documents.\n\n#### Response\n\nPagination returns the specified start, count and overall total numer of matching documents as a wrapper to the results from Mongo.\n\n```Javascript\n{\n\toptions : {\n\t\tcount : 50,\n\t\tstart : 0\n\t},\n\tresults : [ ... ],\n\ttotal : 734\n}\n```\n\n## Utility Methods\n\n### mergeFilters\n\nmongoose-middleware provides a helper function if you need to programmatically\nadd filters to the query. It will intelligently merge structures, and ensure\nthat elements are turned into Arrays when they need to be.\n\n#### Example\n\n```Javascript\nvar base = {\n\t\tfilters : {\n\t\t\tmandatory : {\n\t\t\t\texact : {\n\t\t\t\t\tbreed : ['manx', 'siamese', 'tabby'],\n\t\t\t\t\tname : 'Ballard'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tmodel = {\n\t\tfilters : {\n\t\t\tmandatory : {\n\t\t\t\texact : {\n\t\t\t\t\tbreed : 'calico',\n\t\t\t\t\tname : 'Fremont'\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tmerged = require('mongoose-middleware').mergeFilters(base, model);\n```\n\n#### Result\n\n```Javascript\n{\n\tfilters : {\n\t\tmandatory : {\n\t\t\texact : {\n\t\t\t\tbreed : ['manx', 'siamese', 'tabby', 'calico'],\n\t\t\t\tname : ['Ballard', 'Fremont']\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\n## License\n\nMIT Style\n\n```text\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n```\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/PlayNetwork/mongoose-middleware/issues"
  },
  "homepage": "https://github.com/PlayNetwork/mongoose-middleware",
  "_id": "mongoose-middleware@0.2.20",
  "_from": "mongoose-middleware@^0.2.19"
}
